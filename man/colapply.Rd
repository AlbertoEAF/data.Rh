% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{colapply}
\alias{colapply}
\title{Applies a function to columns of a data.table}
\usage{
colapply(data, fn, cols = c(), cols_pattern = c(), prefix = "",
  suffix = "", by = NULL, coltypes_filter_fn = NULL, inplace = F)
}
\arguments{
\item{data}{- must be a data.table}

\item{fn}{- function to apply to the columns}

\item{cols}{- a character vector. If used only columns with such names will be used.}

\item{cols_pattern}{- a character specifying the cols name pattern to which the function will be applied}

\item{prefix}{- the prefix to apply to the resulting column names}

\item{suffix}{- the suffix to apply to the resulting column names}

\item{by}{- same as in data.table}

\item{inplace}{(default==FALSE) - TRUE/FALSE}

\item{coltype_filter_fn}{- a function that filters the coltypes object (applied at the end). Takes a coltypes data.table and returns it filtered.}
}
\value{
data.table with remapped columns
}
\description{
You can apply a function independently to many columns at the same time.
You can apply a function to:
 - all columns
 - specified columns (with cols=c("col1","col2", ...))
 - cols whose name match cols_pattern
}
\examples{
    capply(data.table(iris), typeof)
    capply(data.table(iris), mean, cols_pattern="Length|Width")
    capply(data.table(iris), unique, cols=c("Species"))
    capply(data.table(iris), unique, c("Species")) # the same - cols is the first optional argument
    capply(data.table(iris), unique, "Species") # if the vector has dimension 1, this is equivalent
    capply(data.table(iris), function(x){x^2}, cols_pattern="Length|Width", inplace=T) # square all numeric columns

}
